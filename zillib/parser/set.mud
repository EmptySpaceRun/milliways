<DEFINITIONS "set">

;<USE "NEWSTRUC">

<SET-DEFSTRUCT-FILE-DEFAULTS>

<DEFSTRUCT SET (VECTOR 'CONSTRUCTOR)
	   (SET-ELEMENTS LIST)>

<DEFINE MAKE-SET ("TUPLE" THINGS)
  <CHTYPE [(!.THINGS)] SET>>

<DEFMAC SET-LENGTH ('S)
  <FORM LENGTH <FORM SET-ELEMENTS .S>>>

<DEFMAC MAPSET ('FINALF 'FCN 'SET)
  <FORM MAPF .FINALF .FCN <FORM SET-ELEMENTS .SET>>>

<DEFINE IN-SET? (OBJ SET:SET)
  <MAPSET %<>
	  <FUNCTION (SOBJ)
	    <AND <==? .OBJ .SOBJ> <MAPLEAVE T>>>
	  .SET>>

<DEFINE ADD-OBJ-TO-SET (OBJ SET:SET)
  <COND (<IN-SET? .OBJ .SET> %<>)
	(ELSE
	 <1 .SET (.OBJ !<1 .SET>)>)>>

<DEFINE ADD-SET-TO-SET (FROM:SET TO:SET)
  <BIND ((CHANGE? <>))
    <MAPSET %<>
	    <FUNCTION (OBJ)
	      <COND (<ADD-OBJ-TO-SET .OBJ .TO>
		     <SET CHANGE? T>)>>
	    .FROM>
    .CHANGE?>>

<DEFINE COPY-SET (S:SET "VALUE" SET)
  <CHTYPE [<LIST !<1 .S>>] SET>>

<DEFINE REMOVE-OBJ-FROM-SET (OBJ SET:SET)
  <PROG ((L <1 .SET>))
    <COND (<EMPTY? .L> <RETURN .SET>)
	  (<==? <1 .L> .OBJ> <1 .SET <REST .L>> <RETURN .SET>)>
    <REPEAT (RL)
      <SET RL <REST .L>>
      <COND (<EMPTY? .RL> <RETURN .SET>)
	    (<==? <1 .RL> .OBJ> <PUTREST .L <REST .RL>> <RETURN .SET>)>
      <SET L .RL>>>>

<DEFINE IS-EMPTY-SET? (S:SET)
  <EMPTY? <1 .S>>>

<END-DEFINITIONS>
