<DEFINITIONS "lalrdefs">

;<USE "NEWSTRUC">

<INCLUDE "symbols" "set">

<SET-DEFSTRUCT-FILE-DEFAULTS>

<DEFSTRUCT PRODUCTION (VECTOR ('PRINTTYPE PRINT-PRODUCTION))
	   (PROD-FCN ATOM)
	   (PROD-LEFT SYMBOL 'NONE)
	   (PROD-RIGHT <VECTOR [REST SYMBOL]>)
	   (PROD-NUMBER <OR FALSE FIX>)
	   (PROD-ERR-PRIORITY FIX)
	   (PROD-PRIORITY FIX)>

<DEFSTRUCT STATE (VECTOR
		  'CONSTRUCTOR
		  ('CONSTRUCTOR MAKE-STATE
		   ('STATE-SET
		    "AUX" (STATE-NUMBER '<SETG NUM-OF-STATES
					       <+ ,NUM-OF-STATES 1>>)))
		  ('PRINTTYPE PRINT-SET-STATE))
	   (STATE-SET SET 'NONE)
	   (STATE-CONSIDERED? <OR ATOM FALSE>)
	   (STATE-NUMBER FIX)>

<DEFSTRUCT ITEM (VECTOR ('PRINTTYPE PRINT-ITEM))
	   (ITEM-PROD PRODUCTION 'NONE)
	   (ITEM-DOT FIX 0)
	   (ITEM-FOLLOWS SET 'NONE)
	   (ITEM-CLOSED? <OR ATOM FALSE> <>)>

<GDECL (NUM-OF-PRODUCTIONS) FIX
       (ALL-PRODUCTIONS) <LIST [REST PRODUCTION]>>

<DEFMAC PROD-LENGTH ('PROD)
  <FORM LENGTH <FORM PROD-RIGHT .PROD>>>

<DEFINE PRODUCTION (FCN:ATOM LEFT:ATOM PRI:FIX "ARGS" RIGHT:LIST)
  <MAPF <>
	<FUNCTION (RIGHT:<LIST [REST ATOM]>
		   "AUX" (LEFT:SYMBOL <LOOKUP-SYMBOL .LEFT>)
			 (PROD:PRODUCTION
			  <MAKE-PRODUCTION 'PROD-FCN .FCN
					   'PROD-LEFT .LEFT
					   'PROD-RIGHT <MAPF ,VECTOR
							     ,LOOKUP-SYMBOL
							     .RIGHT>
					   'PROD-ERR-PRIORITY .PRI>))
	     <SYM-PRODS .LEFT (.PROD !<SYM-PRODS .LEFT>)>
	     <PROD-NUMBER .PROD
			  <SETG NUM-OF-PRODUCTIONS
				<+ ,NUM-OF-PRODUCTIONS 1>>>
	     <SETG ALL-PRODUCTIONS (.PROD !,ALL-PRODUCTIONS)>>
	.RIGHT>>

<DEFINE STARTING-SYMBOL (START "AUX" (PL:LIST ,ALL-PRODUCTIONS)
			 (AT:LIST ,ALL-TERMINALS) (SL ,ALL-SYMBOLS)
			 (ANT:LIST ,ALL-NONTERMINALS) NP)
  <MAPF <>
    <FUNCTION (P:PRODUCTION "AUX" (USED? <>) (LEFT <PROD-LEFT .P>))
      ; "Make sure the left side is used in the right side of some
	 other production"
      <COND (<N==? .LEFT <LOOKUP-SYMBOL .START>>
	     <MAPF <>
	       <FUNCTION (PP:PRODUCTION)
	         <COND (<MEMQ .LEFT <PROD-RIGHT .PP>>
			<SET USED? T>
			<MAPLEAVE>)>>
	       .PL>
	     <COND (<NOT .USED?>
		    <ERROR LEFT-SIDE-OF-PRODUCTION-NEVER-USED!-ERRORS
			   .P
			   STARTING-SYMBOL>)>)>
      <MAPF <>
        <FUNCTION (S:SYMBOL)
	  <COND (<AND <NOT <MEMQ .S .AT>>
		      <EMPTY? <SYM-PRODS .S>>>
		 <ERROR SYMBOL-NOT-TERMINAL-OR-NO-PRODUCTIONS!-ERRORS
			.S .P STARTING-SYMBOL>)>>
	<PROD-RIGHT .P>>>
    .PL>
  <PROG ((CT1 <+ <LENGTH .AT> 1>) (CT2 <+ <LENGTH .ANT> 1>))
    <SETG SYMBOL-VECTOR
	  [<IVECTOR <- .CT1 1> '<NTH .AT <SET CT1 <- .CT1 1>>>>
	   <IVECTOR <- .CT2 1> '<NTH .ANT <SET CT2 <- .CT2 1>>>>]>>
  <SET NP <MAKE-PRODUCTION 'PROD-FCN LIST 'PROD-LEFT ,START-SYMBOL
			   'PROD-RIGHT [<LOOKUP-SYMBOL .START>]
			   'PROD-ERR-PRIORITY 0>>
  <SYM-PRODS ,START-SYMBOL (.NP !<SYM-PRODS ,START-SYMBOL>)>
  .NP>

<DEFINE COMPUTE-FIRSTS ()
  <MAPF <>
	  <FUNCTION (TERM:SYMBOL) <ADD-OBJ-TO-SET .TERM <SYM-FIRSTS .TERM>>>
	  ,ALL-TERMINALS>
  <REPEAT (SOMETHING-CHANGED?)
    <SET SOMETHING-CHANGED? <>>
    <MAPF <>
	  <FUNCTION (NONTERM:SYMBOL)
	    <MAPF <>
		  <FUNCTION (PROD:PRODUCTION)
		    <BIND ((KEEP-GOING? T))
		      <MAPF <>
			    <FUNCTION (RSYM:SYMBOL)
			      <SET KEEP-GOING? <>>
			      <MAPSET <>
				      <FUNCTION (RFIRST:SYMBOL)
					<COND (<==? .RFIRST ,EPSILON-SYMBOL>
					       <SET KEEP-GOING? T>)
					      (<ADD-OBJ-TO-SET
						.RFIRST
						<SYM-FIRSTS .NONTERM>>
					       <SET SOMETHING-CHANGED? T>)>>
				      <SYM-FIRSTS .RSYM>>
			      <OR .KEEP-GOING? <MAPLEAVE>>>
			    <PROD-RIGHT .PROD>>
		      <COND (<AND .KEEP-GOING?
				  <ADD-OBJ-TO-SET ,EPSILON-SYMBOL
						  <SYM-FIRSTS .NONTERM>>>
			     <SET SOMETHING-CHANGED? T>)>>>
		  <SYM-PRODS .NONTERM>:<LIST [REST PRODUCTION]>>>
	  ,ALL-NONTERMINALS>
    <OR .SOMETHING-CHANGED? <RETURN>>>>

<DEFINE PRINT-PRODUCTION (P:PRODUCTION)
  <BIND ((OUTCHAN .OUTCHAN))
    <PRIN1 <PROD-LEFT .P>>
    <PRINC " ==>">
    <MAPF %<>
	  <FUNCTION (R:SYMBOL) <PRINC " "> <PRIN1 .R>>
	  <PROD-RIGHT .P>>>>

\

;"STATES"

<GDECL (NUM-OF-STATES) FIX>

<DEFINE PRINT-SET-STATE (S:STATE "AUX" (OUTCHAN .OUTCHAN))
    <PRINT-MANY .OUTCHAN PRINC
		"State #" <STATE-NUMBER .S>
		":" PRMANY-CRLF>
    <MAPSET %<>
	    <FUNCTION (I) <PRIN1 .I> <CRLF>>
	    <STATE-SET .S>>
    <CRLF>>

<DEFINE PRINT-ITEM (I:ITEM)
  <BIND ((OUTCHAN .OUTCHAN)
	 (P:PRODUCTION <ITEM-PROD .I>)
	 (DOT:FIX <ITEM-DOT .I>)
	 (N:FIX 0))
    <PRIN1 <PROD-LEFT .P>>
    <PRINC " ==>">
    <MAPF %<>
	  <FUNCTION (R:SYMBOL)
	    <COND (<==? .N .DOT> <PRINC " .">)>
	    <PRINC " ">
	    <PRIN1 .R>
	    <SET N <+ .N 1>>>
	  <PROD-RIGHT .P>>
    <COND (<==? .N .DOT> <PRINC " .">)>
    <PRINC " ">
    <PRIN1 <1 <ITEM-FOLLOWS .I>>>>>

<END-DEFINITIONS>
